<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>IainRawlings.com - Blog</title><link href="IainRawlings.com/" rel="alternate"></link><link href="IainRawlings.com/feeds/blog.atom.xml" rel="self"></link><id>IainRawlings.com/</id><updated>2023-10-19T19:09:00+01:00</updated><entry><title>Github integration</title><link href="IainRawlings.com/github-integration.html" rel="alternate"></link><published>2023-10-19T19:09:00+01:00</published><updated>2023-10-19T19:09:00+01:00</updated><author><name>Iain Rawlings</name></author><id>tag:None,2023-10-19:IainRawlings.com/github-integration.html</id><summary type="html">&lt;p&gt;automating commits to github&lt;/p&gt;</summary><content type="html">&lt;p&gt;Trying to integrate some form of CI/CD. Modifying the Makefile to stage, comment and commit to github. Lets go!&lt;/p&gt;
&lt;p&gt;edit: lets commit again!
edit: #4 is missing, so lets commit and try to push for #5&lt;/p&gt;</content><category term="Blog"></category><category term="Blog"></category><category term="github"></category></entry><entry><title>More small fixes</title><link href="IainRawlings.com/more-small-fixes.html" rel="alternate"></link><published>2023-10-14T17:58:00+01:00</published><updated>2023-10-14T17:58:00+01:00</updated><author><name>Iain Rawlings</name></author><id>tag:None,2023-10-14:IainRawlings.com/more-small-fixes.html</id><summary type="html">&lt;p&gt;more small fixes - S3 Upload&lt;/p&gt;</summary><content type="html">&lt;p&gt;I modified the makefile to change the way the uploads occur. No longer will aws cli complain about ACL's not existing when trying to upload to S3, as we're now using &lt;code&gt;aws s3 cp&lt;/code&gt; to copy the files to the bucket instead.                                                                               &lt;/p&gt;</content><category term="Blog"></category><category term="Pelican"></category></entry><entry><title>Octopress / Date Issues</title><link href="IainRawlings.com/octopress-date-issues.html" rel="alternate"></link><published>2023-10-14T00:00:00+01:00</published><updated>2023-10-14T00:00:00+01:00</updated><author><name>Iain Rawlings</name></author><id>tag:None,2023-10-14:IainRawlings.com/octopress-date-issues.html</id><summary type="html">&lt;p&gt;Date Display Temporary Fix &amp;amp; Cache Invalidation&lt;/p&gt;</summary><content type="html">&lt;p&gt;Edit: Date's are now fixed to the correct format by setting environment varible in the following manner and then specifying &lt;code&gt;LOCALE = 'en_GB.UTF-8&lt;/code&gt; in &lt;code&gt;pelicanconf.py&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;export LC_ALL=C&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;I've also programatically figured out how to invalidate the Cloudfront cache now using: &lt;/p&gt;
&lt;p&gt;&lt;code&gt;aws cloudfront create-invalidation --distribution-id your_distribution_id_here --paths "/"&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;You can then check the invalidation has completed a very short time later using:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;aws cloudfront list-invalidations --distribution-id your_distribution_id_here&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This will return a JSON object as below and the last entry confirms the invalidation is complete:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;json
{
    "InvalidationList": {
        "Items": [
            {
                "Id": "your_dist_id_here",
                "CreateTime": "2023-10-14T07:56:11.019000+00:00",
                "Status": "Completed"
            },
        ]
    }
}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The next steps are to modify the makefile command to include these steps, which will cut down the publish time and effort required to publish an article once written.&lt;/p&gt;
&lt;p&gt;Edit: The above is now sorted and &lt;code&gt;s3_upload&lt;/code&gt;&lt;/p&gt;</content><category term="Blog"></category><category term="Pelican"></category></entry><entry><title>Cloudfront is fixed!</title><link href="IainRawlings.com/cloudfront-is-fixed.html" rel="alternate"></link><published>2023-10-12T00:00:00+01:00</published><updated>2023-10-12T00:00:00+01:00</updated><author><name>Iain Rawlings</name></author><id>tag:None,2023-10-12:IainRawlings.com/cloudfront-is-fixed.html</id><summary type="html">&lt;p&gt;Issues resolved!&lt;/p&gt;</summary><content type="html">&lt;p&gt;Having sat down to trace through the reason why Cloudfront was giving HTTP 403 errors when trying to load the page a few days ago, I've finally found time to write up what went wrong. &lt;/p&gt;
&lt;p&gt;To recap, I found that the Cloudfront Distribution link was working fine when visiting [https://d29wvgb72tkraq.cloudfront.net/] however, when visiting my domain at [https://iainrawlings.com] or [https://www.iainrawlings.com] I was receiving 403 errors. Initially before loading the page I had thought that the error was probably my DNS configuration over at Cloudflare. As with all things, the devil was in the detail. &lt;/p&gt;
&lt;p&gt;On closer inspection, the 403 error was served from Cloudfront. Which confirmed that the DNS CNAME records were absolutely fine. Cloudfront appeared to be unable to access the S3 bucket which stores the static website pages. I headed over to S3 to check out permissions, spending a some time reading various AWS documentation to try and point myself in the right direction.&lt;/p&gt;
&lt;p&gt;The jewel in the crown of the documentation appeared to be &lt;a href="https://repost.aws/knowledge-center/s3-rest-api-cloudfront-error-403"&gt;this article&lt;/a&gt;. the AWS Knowledge base was a resource I'd missed out on until now. There are very clear points set out on the article as to what can cause the issue of a 403 error between Cloudfront and S3. In my case, the most important one is as follows: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If clients request the root of your distribution, then you must define a default root object.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Because I had not set a root object in Cloudfront (index.html). The interesting difference here is that if you use the S3 static website host, S3 will default to index.html as the root object. There is, however, no such provision in Cloudfront and you MUST define what the root document is.&lt;/p&gt;
&lt;p&gt;Following a quick change and deployment via the AWS console, I checked the site again - Still not working. But it did start to serve correctly over HTTP instead of HTTPS. This points to the certficate being the next issue to solve. A quick check over at the AWS Certificate Manager in the console confirms I had correctly set the DNS entries and validated the certificate for both of my previously mentioned domain names.&lt;/p&gt;
&lt;p&gt;I headed over to the Cloudfront config once again and in short order realised I had forgotten to add the certificate to the configuration. Once populated and redeployed the website is now up and running!&lt;/p&gt;
&lt;p&gt;During the course of diagnosing these issues, I also realised that when uploading new content from my Pi4 to AWS S3, the standard Pelican &lt;code&gt;S3_upload&lt;/code&gt; script complains that ACLs are not active for the bucket and the files cannot be uploaded. The next task to be completed is to modify the makefile and change the &lt;code&gt;s3_upload&lt;/code&gt; command to use &lt;code&gt;aws s3 cp ./output/* s3://iainrawlings.com --recurisve&lt;/code&gt; instead as this doesn't require ACL's to be set due to already being logged in as my user on the AWS command line.&lt;/p&gt;
&lt;p&gt;To Summarize the skills used during this entire exercise: AWS SDK, S3 setup and use, Cloudfront setup and use, DNS setup via cloudfront, Linux command line, pythons Pelican static site generator package, the python venv module to create a virtual env for Pelican on my Pi4 and finally Further use of VSCode for remote access to files on the Pi in an efficent manner. &lt;/p&gt;</content><category term="Blog"></category><category term="Blog"></category><category term="Setup"></category><category term="Pelican"></category><category term="AWS"></category><category term="Cloudfront"></category></entry><entry><title>Cloudfront</title><link href="IainRawlings.com/cloudfront.html" rel="alternate"></link><published>2023-10-08T00:00:00+01:00</published><updated>2023-10-08T00:00:00+01:00</updated><author><name>Iain Rawlings</name></author><id>tag:None,2023-10-08:IainRawlings.com/cloudfront.html</id><summary type="html">&lt;p&gt;Cloudfront is a little troublesome!&lt;/p&gt;</summary><content type="html">&lt;p&gt;Welcome to another blog post over here at learning HQ.&lt;/p&gt;
&lt;p&gt;Firstly I'd like to list where I got to in terms of setting up the static site via cloudfront, so here goes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pelican installed is installed on my local network on the Raspberry Pi4&lt;/li&gt;
&lt;li&gt;An AWS S3 bucket has been created to house the serve the static content generated by Pelican &lt;/li&gt;
&lt;li&gt;It is possible to write articles and issue the &lt;code&gt;make s3_upload&lt;/code&gt; command to drop the files in the S3 bucket&lt;/li&gt;
&lt;li&gt;Cloudfront was added to serve the content at the AWS Edge locations - specifically for America and Europe only at this stage. &lt;/li&gt;
&lt;li&gt;a certificate was generated for HTTPS on AWS Certificate Manager (ACM) and verified by setting the DNS entries for both iainrawlings.com and www.iainrawlings.com&lt;/li&gt;
&lt;li&gt;Presently when visiting the couldfront URL &lt;code&gt;https://d29wvgb72tkraq.cloudfront.net/&lt;/code&gt; a HTTP 403 error is generated forbidding access. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It's early in the day, so we'll see what the day brings in terms of a resolution.&lt;/p&gt;</content><category term="Blog"></category><category term="Blog"></category><category term="Setup"></category><category term="Pelican"></category><category term="AWS"></category></entry><entry><title>Into The Cloudverse</title><link href="IainRawlings.com/into-the-cloudverse.html" rel="alternate"></link><published>2023-10-06T00:00:00+01:00</published><updated>2023-10-06T00:00:00+01:00</updated><author><name>Iain Rawlings</name></author><id>tag:None,2023-10-06:IainRawlings.com/into-the-cloudverse.html</id><summary type="html">&lt;p&gt;Putting things into practice&lt;/p&gt;</summary><content type="html">&lt;p&gt;Here we go!&lt;/p&gt;
&lt;p&gt;Pelican has initially been setup within AWS S3 serving the static content, although the pelican software runs on my trusty Raspberry Pi 4 which I use as a home lab of sorts - alongside about three other models of pi.&lt;/p&gt;
&lt;p&gt;A nice list of things which still need to be configured at a basic level: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Themes&lt;/li&gt;
&lt;li&gt;HTTPS&lt;/li&gt;
&lt;li&gt;Deeper look into the Pelican plugins that would be useful&lt;/li&gt;
&lt;li&gt;Auto content generation&lt;/li&gt;
&lt;li&gt;Write a post explaining a little more about me and the experience I have.&lt;/li&gt;
&lt;/ul&gt;</content><category term="Blog"></category><category term="Blog"></category><category term="Setup"></category><category term="Pelican"></category></entry><entry><title>Testing Times</title><link href="IainRawlings.com/testing-times.html" rel="alternate"></link><published>2023-07-10T00:00:00+01:00</published><updated>2023-07-10T00:00:00+01:00</updated><author><name>Iain Rawlings</name></author><id>tag:None,2023-07-10:IainRawlings.com/testing-times.html</id><summary type="html">&lt;p&gt;403's are annoying&lt;/p&gt;</summary><content type="html">&lt;p&gt;Cloudfront 403 errors are occurring, no idea why at this stage. Investigations ongoing will document what the cause was when I find it.&lt;/p&gt;</content><category term="Blog"></category><category term="Blog"></category><category term="Setup"></category><category term="Pelican"></category></entry></feed>